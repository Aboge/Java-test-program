/*-作者:volcano_hosan
 *-----------蚂蚁爬杆
 *有一根300厘米的细木杆，在第30厘米、80厘米、110厘米、160厘米、250厘米这五个位置上各有一只蚂蚁。
 *木杆很细，不能同时通过两只蚂蚁。开始时，蚂蚁的头朝左还是朝右是任意的，它们只会朝前走或调头，但不会后退。
 *当任意两只蚂蚁碰头时，两只蚂蚁会同时调头朝相反方向走。假设蚂蚁们每秒钟可以走5厘米的距离。
 *请编写一个程序，计算各种可能情形下所有蚂蚁都离开木杆的最小时间和最大时间
 *-------分析:两只蚂蚁碰头之后,因为是相同的个体,速度一样,只是不作停留掉头回走,可以认为两只蚂蚁的行进方向没有改变一直朝一个方向前进
 *
最短时间为离中点最近的蚂蚁离开木棒需要的时间。
最远时间就是离某端最近的蚂蚁往相反端走需要的时间。
即使中间遇到蚂蚁，碰头的那只蚂蚁只是它剩余距离的延续。
例如A蚂蚁30米，它独自走完270米需要的时间是54秒。途中55米遇到B蚂蚁，B蚂蚁转身，剩下的距离依然是A蚂蚁的300-55 = 245米，B蚂蚁100米处遇到C，C蚂蚁转身，实际C蚂蚁又在延续B的路，也就是再延续A的路，只不过A蚂蚁换成了C蚂蚁而已。C蚂蚁再遇到D，依然如此...除非蚂蚁中间出现停顿，否则中间碰N次头，所有蚂蚁一直都在延续需要最长时间离开木棒的蚂蚁所走的路。
验证一：
2只蚂蚁，30米和160米，最远时间肯定是对着走，两只蚂蚁中间M米处碰头，然后各自掉头走对方剩余的路。
验证二：
3只蚂蚁，A30米，B150米，C160米，最远时间A，C肯定是相反方向走，C如果往近端走，那B蚂蚁不管向哪边走都是同验证一。现在A,C都往中间走，1： 如果B与A同向，那么B与C先碰头，此时A一直在往前走，C会掉头，一直到离开。B掉头后向中间走，M米处与A相遇，A,B交换了各自的路。2：如果B与C同向，那么B与A相遇，B延续A的路程，A延续B的路程，B再与C相遇，C延续A的路程，B延续C的路程。
验证三：
4只蚂蚁：A30米，B80米，C150米，D160米。最远时间A，D肯定相反方向走。
现在就是B,C的方向，其实不管B,C怎样选择，AB相遇的话，B延续A的路程，BC再相遇，C延续A的路程，CD再相遇，D延续A的路程。其实你会说那么中间反复相遇怎么办？其实道理就是这样，不管中间怎么相遇，每只蚂蚁只是在相互交换角色。

如果还是无法理解，想象一下，条件限定是所有蚂蚁碰头之后调头走，那么现在想象一下，所有蚂蚁都可以无损的穿透对方的身体。那么蚂蚁碰头跟蚂蚁相互穿透各自身体有什么区别呢？蚂蚁碰头只不过相互交换一下角色罢了。

 */

import java.util.Scanner;

/**
 * 题目描述：
 * 有些蚂蚁在一条水平线上爬行，每只蚂蚁的速率都是1cm/s。蚂蚁爬到水平线的任何一个端点时会立刻掉下来，当两只蚂蚁碰到一起时他们都会立刻调头向相反方向移动。
 * 已知蚂蚁们在水平线上的初始位置，但不幸的是，它们初始的运动方向是不知道的。请计算所有蚂蚁从水平线上掉下来可能所需的最早和最晚的时间。
 *
 * 输入 :第一行有一个整数，表示有多少组测试数据。
 * 每组测试数据以两个整数开始：水平线长度(单位cm)和蚂蚁数，随后的一行中有n个整数，表示每只蚂蚁距水平线左端点的距离。所有的输入的整数都小于1000000而且用空格隔开。
 * 样例输入:
 * 2       //输入两组数据
 *
 * 10 3    //长度为10cm   3只蚂蚁
 * 2 6 7   //到左边端点的距离分别是2、6、7cm
 *
 * 214 7
 * 11 12 7 13 176 23 191
 *
 * 输出: 对于每组测试数据，在同一行输出两个整数，第一个表示所有蚂蚁从水平线上掉下来的最早时间，第二个表示最晚时间。
 * 样例输出
 * 4 8
 * 38 207

 * 解题思路：在给定的水平线上寻找两个值：一个值是距离某个端点最近，另一个值距离某个端点最远。输出这两个值。
 * 最远的距离也就是离着最近的端点的相反端点。比如：水平长度为10，则2的最近点是0，最远距离是10-2=8.
 */
public class Ant {

    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);



        while (scanner.hasNext()) {

            int T = scanner.nextInt();

            for (int t = 0; t < T; t++) {
                int len = scanner.nextInt();//水平长度
                int ant = scanner.nextInt();//蚂蚁数目
                int[] ants = new int[ant];//每只蚂蚁距离
                int lens = len / 2;//水平中点长度

                for (int i = 0; i < ant; i++) {
                    int dis = scanner.nextInt();
                    if (lens >= dis) {
                        ants[i] = dis;
                    } else {
                        ants[i] = len - dis;//全长-远距离=近距离
                    }
                }
                int max = 0;
                int min = lens;
                for (int i = 0; i < ant; i++) {
                    max = Math.max(max, ants[i]);//要所有蚂蚁都掉下来，则最早时间是位于中点位置处的蚂蚁到达端点的时间
                    min = Math.min(min, ants[i]);//最晚掉下来的蚂蚁是距离一个端点最近的相反方向的端点。
                }
                System.out.println(max + " " + (len - min));

            }



        }


    }

}

